// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import frc.robot.subsystems.drive.Drive;
import frc.robot.subsystems.drive.GyroIOPigeon2;
import frc.robot.subsystems.drive.ModuleIOTalonFX;
import edu.wpi.first.math.geometry.Pose2d;
import edu.wpi.first.math.geometry.Rotation2d;
import edu.wpi.first.math.geometry.Translation2d;
import edu.wpi.first.wpilibj.shuffleboard.BuiltInWidgets;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj2.command.Commands;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.button.CommandXboxController;
import com.pathplanner.lib.auto.NamedCommands;
import com.pathplanner.lib.commands.PathPlannerAuto;

import static frc.robot.Constants.Swerve.*;

public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

  // The robot's subsystems
  private final Drive drive;
  private final PoseEstimationSubsystem poseEstimationSubsystem;

  // Joysticks
  private final CommandXboxController driver = new CommandXboxController(0);
  private final CommandXboxController secondDriver = new CommandXboxController(1);
    
  // A chooser for autonomous commands
  SendableChooser<AutoChoice> autoChooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {
    drive = new Drive(
      new GyroIOPigeon2(),//change if using different gyro
      new ModuleIOTalonFX(FRONT_LEFT),
      new ModuleIOTalonFX(FRONT_RIGHT),
      new ModuleIOTalonFX(BACK_LEFT),
      new ModuleIOTalonFX(BACK_RIGHT)
    );
    
    poseEstimationSubsystem = new PoseEstimationSubsystem(
      drive::getGyroRotation,
      drive::getModulePositions
    );

    drive.configureAutoBuilder(poseEstimationSubsystem);

    configureButtonBindings();

    //Add in named commands for pathplanner
    //NamedCommands.registerCommand("Template", new TemplateCommand(templateSubsystem, Constants.Template.motorSpeed));

    //Add autos to shuffleboard
    autoChooser.addOption("Auto 1", AutoChoice.Auto1);
    autoChooser.addOption("Auto 2", AutoChoice.Auto2);
    Shuffleboard.getTab("General").add("Auto Choice", autoChooser).withWidget(BuiltInWidgets.kComboBoxChooser);

    robotEnabled();
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  public void robotEnabled(){
    poseEstimationSubsystem.setCurrentPose(new Pose2d(new Translation2d(0, 0), new Rotation2d(0)));
    drive.straightenWheels();
    drive.resetGyro();
    drive.setFieldState(true);
  }

  
  private void configureButtonBindings() {
    //Drive
    driver.povUp().onTrue(Commands.runOnce(() -> poseEstimationSubsystem.setCurrentPose(new Pose2d(poseEstimationSubsystem.getCurrentPose().getTranslation(), new Rotation2d())), poseEstimationSubsystem));
    driver.povLeft().onTrue(Commands.runOnce(drive::toggleIsFieldOriented));

    drive.setDefaultCommand(
      DriveCommand.joystickDrive(
        drive,
        () -> { // x+ forward is front, x- is backward
          return driver.getLeftY();
        },
        () -> { // y+ is to the left, y- is to the right
          return -driver.getLeftX();
        },
        () -> { // z+ is rotating counterclockwise
          return -driver.getRightX();
        }
      )
    );
  }


  public Command getAutonomousCommand() {
    AutoChoice autoChoice = autoChooser.getSelected();
        String command;

        switch (autoChoice) {
            case Auto1:
                command = "Auto 1";
                break;
            case Auto2:
                command = "Auto 2";
                break;
            default:
                command = "Auto 1";
        }

        return new PathPlannerAuto(command);
  }
}

